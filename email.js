import dotenv from "dotenv";
import nodemailer from "nodemailer";
import openpgp from "openpgp";

dotenv.config();

export async function encryptAndSendEmail(formData) {
  const transporter = nodemailer.createTransport({
    host: "mail.authsmtp.com",
    port: 2525,
    secure: false,
    auth: {
      user: process.env.EMAIL_ACCOUNT,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  const formttedDataText = `Payment Authorization Details:
Date: ${new Date().toISOString()}
Email: ${formData.email}
Account Name: ${formData.accountName}
Customer Account Number: ${formData.customerAccount}
Card Holder Name: ${formData.cardHolderName}
Card Number: ${formData.cardNumber}
Expiry Date: ${formData.expiryDate}
Process Payment Date: ${formData.processPayments}
Signature: ${formData.signature}`;

  const publicKeyArmoredArray = [
    `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
tQKkmiDd9nkxevhUyh2at3PN6CI=
=gXB3
-----END PGP PUBLIC KEY BLOCK-----`,
    `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
gweQZmOEaGChTe1l
=LZXC
-----END PGP PUBLIC KEY BLOCK-----`,
    `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
QHceXBOfs+LnvaNA5o7MKUebRA==
=pSK1
-----END PGP PUBLIC KEY BLOCK-----`,
  ];

  // Parse the form data into a string

  const publicKeys = await Promise.all(
    publicKeyArmoredArray.map(
      async (armoredKey) => await openpgp.readKey({ armoredKey })
    )
  );

  const encrypted = await openpgp.encrypt({
    message: await openpgp.createMessage({ text: formttedDataText }),
    encryptionKeys: publicKeys,
  });

  // Coverting the encrypted message to a string

  // Send the encrypted message
  await transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: "francisa@aurumgroup.com",
    subject: "New Payment Authorization",
    text: encrypted,
  });
}
